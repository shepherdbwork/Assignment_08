#------------------------------------------#  
# Title: CD_Inventory.py  
# Desc: Assignnment 08 - Working with classes  
# Change Log: (Who, When, What)  
# DBiesinger, 2030-Jan-01, created file  
# DBiesinger, 2030-Jan-01, added pseudocode to complete assignment 08  
# BShepherd, 2020-Aug-31, Begin edit to template, adding Class CD  
# BShepherd, 2020-Sep-01, Continued edit to Class FileIO  
#------------------------------------------#  
  
# -- DATA -- #  
import pickle  
strFileName = 'cdInventory.txt'  
lstOfCDObjects = []  
  
class CD:  
    """Stores data about a CD: 
 
    properties: 
        cd_id: (int) with CD ID 
        cd_title: (string) with the title of the CD 
        cd_artist: (string) with the artist of the CD 
    methods: 
    """  
    def __init__(self, cd_id, cd_title, cd_artist):  
        self.__CDid = cd_id  
        self.__title = cd_title  
        self.__artist = cd_artist  
 
    @property  
    def CDid(self):  
        return self.__CDid  
 
    @CDid.setter  
    def CDid(self, value):  
        if type(value) == int:  
            self.__CDid = value  
        else:  
            raise Exception('This value needs to be set as an Integer!')  
 
    @property  
    def title(self):  
        return self.__title  
 
    @title.setter  
    def title(self, value):  
        if type(value) == str:  
            self.__title = value  
        else:  
            raise Exception('This value needs to be set as a String!')  
 
    @property  
    def artist(self):  
        return self.__artist  
 
    @artist.setter  
    def artist(self, value):  
        if type(value) == str:  
            self.__artist = value  
        else:  
            raise Exception('This value needs to be set as a String!')  
  
  
# -- PROCESSING -- #  
class FileIO:  
    """Processes data to and from file: 
 
    properties: 
 
    methods: 
        save_inventory(file_name, lst_Inventory): -> None 
        load_inventory(file_name): -> (a list of CD objects) 
 
    """  
    @staticmethod  
    def load_file(file_name):  
        try:  
            objFile = open(file_name, 'rb')  
            data = pickle.load(objFile)  
            file_name.extend(data)  
            objFile.close()  
        except FileNotFoundError as e:  
            print('===================================================')  
            print(type(e), e, e.__doc__, sep='\n')  
            print('You will need to use the Add function to Continue')  
            print('===================================================\n')  
        except EOFError as e:  
            print('===================================================')  
            print(type(e), e, e.__doc__, sep='\n')  
            print('Your file is Empty please use Add to add to your file :\)')  
            print('===================================================\n')  
    # TODO Add code to process data to a file  
    @staticmethod  
    def write_file(file_name):  
        objFile = open(file_name, 'wb')  
        pickle.dump(objFile)  
        objFile.close()  
  
  
# -- PRESENTATION (Input/Output) -- #  
class IO:  
    @staticmethod  
    def print_menu():  
        """Displays a menu of choices to the user 
 
        Args: 
            None. 
 
        Returns: 
            None. 
 
        """  
        print('Menu\n\n[l] load Inventory from file\n[a] Add CD\n[i] Display Current Inventory')  
        print('[s] Save Inventory to file\n[x] exit\n')  
 
    @staticmethod  
    def menu_choice():  
        """Gets user input for menu selection 
 
        Args: 
            None. 
 
        Returns: 
            choice (string): a lower case sting of the users input out of the choices l, a, i, d, s or x 
 
        """  
        choice = ' '  
        while choice not in ['l', 'a', 'i', 's', 'x']:  
            choice = input('Which operation would you like to perform? [l, a, i, s or x]: ').lower().strip()  
        print()  # Add extra space for layout  
        return choice  
 
    @staticmethod  
    def show_inventory(table):  
        """Displays current inventory table 
 
 
        Args: 
            table (list of dict): 2D data structure (list of dicts) that holds the data during runtime. 
 
        Returns: 
            None. 
 
        """  
        print('======= The Current Inventory: =======')  
        print('ID\tCD Title (by: Artist)\n')  
        for row in table:  
            print(row)  
        print('======================================')  
 
    @staticmethod  
    def add_info():  
        """ Function to add the CD info to a file 
 
        Args: 
            None 
 
        Returns: 
            # None 
            strID: ID input by user to use as an identifier 
            strTitle: Second value captured to identify the Title of an album 
            stArtist: Thrid value captured to identify the Artest of the album 
 
        """  
          
        strID = input('Enter ID: ').strip()  
        strTitle = input('What is the CD\'s title? ').strip()  
        strArtist = input('What is the Artist\'s name? ').strip()  
        return(strID, strTitle, strArtist)  
  
# -- Main Body of Script -- #  
# Load data from file into a list of CD objects on script start  
FileIO.load_file(strFileName)  
# Display menu to user  
while True:  
    IO.print_menu()  
    strChoice = IO.menu_choice()  
    # let user exit program  
    if strChoice == 'x':  
        break  
    # show user current inventory  
    if strChoice == 'l':  
        print('WARNING: If you continue, all unsaved data will be lost and the Inventory re-loaded from file.')  
        strYesNo = input('type \'yes\' to continue and reload from file. otherwise reload will be canceled: ')  
        if strYesNo.lower() == 'yes':  
            print('reloading...')  
            lst = FileIO.load_file(strFileName)  
            IO.show_inventory(lstOfCDObjects)  
        else:  
            input('canceling... Inventory data NOT reloaded. Press [ENTER] to continue to the menu.')  
            IO.show_inventory(lstOfCDObjects)  
        continue  # start loop back at top.  
    # let user add data to the inventory  
    elif strChoice == 'a':  
        strID, strTitle, strArtist = IO.add_info()  
        infoAdd = (strID, strTitle, strArtist)  
        lstOfCDObjects.append(infoAdd)  
        IO.show_inventory(lstOfCDObjects)  
    # let user save inventory to file  
    elif strChoice == 's':  
        IO.show_inventory(lstOfCDObjects)  
        strYesNo = input('Save this inventory to file? [y/n] ').strip().lower()  
        if strYesNo == 'y':  
            FileIO.write_file(strFileName)  
        else:  
            input('The inventory was NOT saved to file. Press [ENTER] to return to the menu.')  
        continue  # start loop back at top.  
    # let user load inventory from file  
    else strChoice == 'i':  
        IO.show_inventory(lstOfCDObjects)  
    continue  
else:  
    print('General Error')  
